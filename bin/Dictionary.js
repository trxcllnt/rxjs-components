// Generated by CoffeeScript 1.3.1
var Dictionary,
  __hasProp = {}.hasOwnProperty;

Dictionary = (function() {

  Dictionary.name = 'Dictionary';

  function Dictionary() {
    var observables, setObservable, setVal, subjects,
      _this = this;
    observables = {};
    subjects = {};
    this.define = function(name, initial) {
      _this.__defineGetter__(name, function() {
        return observables[name];
      });
      if (initial !== void 0 && (initial instanceof Rx.Observable)) {
        return setObservable(name, initial.publish());
      } else {
        return setVal(name, initial);
      }
    };
    this.useObservable = function(name, observable) {
      observable.__defineGetter__('val', function() {
        return subjects[name].val;
      });
      return observables[name] = observable;
    };
    this.dispose = function() {
      var key, subj;
      for (key in subjects) {
        if (!__hasProp.call(subjects, key)) continue;
        subj = subjects[key];
        subj.onCompleted();
        subj.dispose();
        delete subj.val;
        delete _this[key];
        delete subjects[key];
      }
      for (key in observables) {
        if (!__hasProp.call(observables, key)) continue;
        delete observables[key];
      }
    };
    setObservable = function(name, observable) {
      var disposable;
      disposable = observable.connect();
      _this.__defineSetter__(name, function(val) {
        disposable.dispose();
        disposable = (observable = val.publish()).connect();
        return subjects[name] = observable;
      });
      return subjects[name] = observables[name] = observable;
    };
    setVal = function(name, initial) {
      var latest, subj;
      latest = initial;
      _this.__defineSetter__(name, function(val) {
        return subjects[name].onNext(latest = val);
      });
      subj = new Rx.BehaviorSubject(initial);
      subj.__defineGetter__('val', function() {
        return latest;
      });
      return subjects[name] = observables[name] = subj;
    };
  }

  Dictionary.inc = 1;

  Dictionary.prototype.getUUID = function() {
    return Math.round(Math.random() * new Date().getTime() + ++Dictionary.inc, Math.pow(10, 10));
  };

  return Dictionary;

})();

// Generated by CoffeeScript 1.3.1
var HTMLSkin,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

HTMLSkin = (function(_super) {

  __extends(HTMLSkin, _super);

  HTMLSkin.name = 'HTMLSkin';

  function HTMLSkin() {
    var disposable, skin,
      _this = this;
    HTMLSkin.__super__.constructor.call(this);
    this.define('element');
    this.skin = skin = this.getSkin();
    disposable = Rx.Disposable.empty;
    this.element.where(function(e) {
      return e != null;
    }).subscribe((function(e) {
      var d, disposables, _i, _len;
      disposable.dispose();
      disposable = new Rx.CompositeDisposable();
      e.__defineGetter__('selector', function() {
        return _this.skin;
      });
      e.useObservable('parent', e.parent.where(function(p) {
        return (p != null) && !(p instanceof UIElement);
      }));
      e.useObservable('index', e.index.combineLatest(e.parent, function(i, p) {
        var len;
        len = p.children().length;
        if (i < -1 || i > len) {
          return -1;
        } else {
          return i;
        }
      }).where(function(i) {
        return i !== -1;
      }));
      disposables = _this.addListeners(e, skin).concat([
        e.parent.takeUntil(e.index).subscribe(function(parent) {
          return e.index = parent.children().length;
        }), e.width.where(function(x) {
          return !isNaN(x);
        }).subscribe(function(width) {
          return skin.width(width);
        }), e.height.where(function(x) {
          return !isNaN(x);
        }).subscribe(function(height) {
          return skin.height(height);
        }), e.x.where(function(x) {
          return !isNaN(x);
        }).subscribe(function(x) {
          return skin.css('left', x);
        }), e.y.where(function(y) {
          return !isNaN(y);
        }).subscribe(function(y) {
          return skin.css('top', y);
        }), e.z.where(function(z) {
          return !isNaN(z);
        }).subscribe(function(z) {
          return skin.css('-webkit-transform', "scaleZ(" + z + ")");
        }), e.define('css', {}).subscribe(function(css) {
          return skin.css(css);
        }), e.parent.combineLatest(e.index, function(p, i) {
          var len, sibling;
          len = p.children().length;
          if (len === 0) {
            return [p, p.append];
          }
          sibling = $(p.children().get(Math.min(i - 1, len - 1)));
          return [sibling, sibling.after];
        }).subscribe(function(a) {
          return a[1].apply(a[0], skin);
        })
      ]);
      for (_i = 0, _len = disposables.length; _i < _len; _i++) {
        d = disposables[_i];
        disposable.add(d);
      }
    }), null, (function() {
      disposable.dispose();
      disposable = null;
      skin.remove();
      return skin = null;
    }));
  }

  HTMLSkin.prototype.getSkin = function() {
    return $('<div></div>');
  };

  HTMLSkin.prototype.addListeners = function(element, skin) {
    return [];
  };

  return HTMLSkin;

})(Dictionary);
